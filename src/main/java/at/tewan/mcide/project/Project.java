package at.tewan.mcide.project;

import at.tewan.mcide.Resources;
import at.tewan.mcide.mcfiles.PackDefinition;
import at.tewan.mcide.project.json.ProjectConfig;
import at.tewan.mcide.settings.GlobalSettings;
import com.google.gson.Gson;

import java.io.*;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Manager für alle Projekt spezifischen variablen.
 *
 * */
public class Project {

    private File projectConfigFile;
    private File projectRoot;

    private ProjectConfig projectConfig;

    public Project(File projectConfigFile) {
        this.projectConfigFile = projectConfigFile;
        this.projectRoot = new File(projectConfigFile.getParent());
        this.projectConfig = getProjectConfig(projectConfigFile);
    }

    public void setProjectConfig(ProjectConfig projectConfig) {
        this.projectConfig = projectConfig;
    }

    public ProjectConfig getProjectConfig() {
        return projectConfig;
    }

    public File getProjectRoot() {
        return projectRoot;
    }

    public File getProjectConfigFile() {
        return projectConfigFile;
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    //
    //                          STATIC FUNCTIONS
    //
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////

    // Das aktive Projekt
    private static Project currentProject;

    private static PackDefinition resourceDefinition, dataDefinition;

    // Die Versionnummern die in die Project Configs geschrieben werden.
    private static final int DATAPACK_VERSION = 1;
    private static final int RESOURCEPACK_VERSION = 4;

    private static final String PROJECT_CONFIG_FILE_NAME = "project.mcide";

    /**
     * Erstellt ein neues Projekt
     * */
    public static void newProject(String name, String author, String... namespaces) {

        // Neues Projekt erstellen und Attribute setzen
        Project project = new Project(getProjectRoot(name.toLowerCase()));
        ProjectConfig config = new ProjectConfig();
        config.setName(name);
        config.setAuthor(author);
        config.setNamespaces(new ArrayList<>(Arrays.asList(namespaces)));

        project.setProjectConfig(config);

        currentProject = project;

        // Data und Resourcepack mcmeta Definitionsdateien erstellen
        String description = "Project: " + name + " By: " + author + " \nGenerated by MC-IDE";
        resourceDefinition = new PackDefinition(description, RESOURCEPACK_VERSION);
        dataDefinition = new PackDefinition(description, DATAPACK_VERSION);

        // Projekt auf die Platte speichern
        save();
    }

    /**
     * Erstellt die Ordnerstruktur des Projektes und speichert Definitionsdateien
     * */
    public static void save() {
        Gson gson = new Gson();

        try {

        // ================= ORDNER STRUKTUR ======================
        createDir("");
        createDir("res");
        createDir("data");
        createDir("data/minecraft");
        createDir("data/minecraft/tags");

        for(int i = 0; i < currentProject.getProjectConfig().getNamespaces().size(); i++) {
            String namespace = currentProject.getProjectConfig().getNamespaces().get(i);

            String namespaceDataDir = "data/" + namespace + "/";
            String namespaceResourceDir = "res/" + namespace + "/";

            System.out.println(namespaceDataDir);

            createDir(namespaceDataDir);
            createDir(namespaceResourceDir);

            createDir(namespaceDataDir + "functions/");
            createDir(namespaceDataDir + "tags/");
            createDir(namespaceDataDir + "recipes/");
            createDir(namespaceDataDir + "functions/");
            createDir(namespaceDataDir + "loottables/");
            createDir(namespaceDataDir + "advancements/");

            createDir(namespaceResourceDir + "textures/");
            createDir(namespaceResourceDir + "sounds/");
            createDir(namespaceResourceDir + "lang/");
            createDir(namespaceResourceDir + "models/");
        }

        // ================= PROJECT SETTING DATEI ======================

        FileWriter projectConfigWriter = new FileWriter(getCurrentProjectConfigFile());
        projectConfigWriter.write(gson.toJson(currentProject));
        projectConfigWriter.close();

        File dataDefinitionFile = new File(getCurrentProjectDatapackDir() + "pack.mcmeta");
        File resourceDefinitionFile = new File(getCurrentProjectResourceDir() + "pack.mcmeta");

        FileWriter dataFileWriter = new FileWriter(dataDefinitionFile);
        FileWriter resourceFileWriter = new FileWriter(resourceDefinitionFile);

        dataFileWriter.write(gson.toJson(dataDefinition));
        resourceFileWriter.write(gson.toJson(resourceDefinition));

        dataFileWriter.close();
        resourceFileWriter.close();


        } catch (IOException exception) {
            exception.printStackTrace();
        }

    }

    /**
     * @param data Ob das Datapack kopiert werden soll
     * @param resource Ob das Resourcepack kopiert werden soll
     */
    public static void build(boolean data, boolean resource) {
        if(data) {
            try {
                Files.copy(currentProject.getProjectRoot().toPath(), new File(getDataDestDir()).toPath());
            } catch(IOException ex) {
                ex.printStackTrace();
            }
        }
        //if(resource)
    }

    public static void load(File configFile) {

        Project project = new Project(configFile);
        ProjectConfig cfg = getProjectConfig(configFile);

        project.setProjectConfig(cfg);

        currentProject = project;

        ArrayList<String> recentProjects = GlobalSettings.getSettings().getRecentProjects();
        if(!recentProjects.contains(configFile.toString())) {
            recentProjects.add(configFile.toString());
            GlobalSettings.saveConfig();
        }

    }

    private static void createDir(String name) {
        File f = new File(currentProject.getProjectRoot().toString() + name);
        if(!f.exists()) f.mkdir();
    }

    public static String[] getNamespaces() {
        if(currentProject == null) {
            return new String[0];
        } else {
            return getCurrentProjectConfig().getNamespaces().toArray(new String[getCurrentProjectConfig().getNamespaces().size()]);
        }
    }

    public static ProjectConfig getProjectConfig(File projectConfigFile) {
        try {
            Gson gson = new Gson();

            return gson.fromJson(new FileReader(projectConfigFile), ProjectConfig.class);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public static File getProjectConfigFile(File projectRoot) {
        return new File(projectRoot.toString().concat(PROJECT_CONFIG_FILE_NAME));
    }

    public static File getCurrentProjectConfigFile() {
        return getProjectConfigFile(currentProject.getProjectRoot());
    }

    public static File getProjectRoot(String projectDirectoryName) {
        return new File(Resources.getWorkspaceDir().toString() + projectDirectoryName.concat("/"));
    }

    public static File getCurrentProjectResourceDir() {
        return new File(currentProject.getProjectRoot().toString().concat("/res/"));
    }

    public static File getCurrentProjectDatapackDir() {
        return new File(currentProject.getProjectRoot().toString().concat("/data/"));
    }

    public static String getResourceDestDir() {

        // Wenn noch keine Welt festgelegt wurde, soll null zurückgegeben werden.
        if(getDestDir() == null) return null;

        return getDestDir() + "resource.zip";
    }

    public static String getDataDestDir() {

        // Wenn noch keine Welt festgelegt wurde, soll null zurückgegeben werden.
        if(getDestDir() == null) return null;

        return getDestDir() + "datapacks/" + currentProject.getProjectConfig().getName();
    }

    public static String getDestDir() {
        if(currentProject.getProjectConfig().getWorldname() == null) return null;

        return GlobalSettings.getSettings().getMcDir() + "/saves/" + currentProject.getProjectConfig().getWorldname() + "/";
    }

    public static String getNamespaceResource(String namespace) {
        return getCurrentProjectResourceDir() + namespace + "/";
    }

    public static String getNamespaceData(String namespace) {
        return getCurrentProjectDatapackDir() + namespace + "/";
    }

    public static String getNamespaceFunctions(String namespace) {
        return getNamespaceData(namespace) + "functions/";
    }

    public static Project getCurrentProject() {
        return currentProject;
    }

    public static ProjectConfig getCurrentProjectConfig() {
        return currentProject.getProjectConfig();
    }
}
