package at.tewan.mcide.app.controllers;

import at.tewan.mcide.Resources;
import at.tewan.mcide.app.controls.CodeTab;
import at.tewan.mcide.mcfunction.Syntax;
import at.tewan.mcide.mcfunction.command.Commands;
import at.tewan.mcide.project.Project;
import at.tewan.mcide.filters.ExtensionFilters;
import com.google.gson.Gson;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.FileChooser;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ResourceBundle;

public class ControllerFunctions extends ControllerBrowser {

    @FXML
    private TabPane tabPane;

    private Syntax syntax;

    public ControllerFunctions() {
        super("Functions", ControllerBrowser.DATAPACK, new String[]{"functions"}, new String[]{"Functions"});

        Gson json = new Gson();
        syntax = json.fromJson(new InputStreamReader(Resources.getResource("syntax/mcfunction.json")), Syntax.class);
        Commands.init(syntax);
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        super.initialize(location, resources);
    }

    // Superklasse führt diese Methode aus, wenn im File Browser eine Datei aufgerufen wird.
    // Für den mcfunction editor soll die Datei im Code Editor in einem Tab geöffnet werden.
    @Override
    protected void openFile(File file) throws IOException {

        // Für alle Tabs muss getestet werden, ob dieser bereits für die Datei zuständig ist,
        // die vom Nutzer geöffnet werden soll.
        for(Tab tab : tabPane.getTabs()) {

            // Tab zu Code tab casten.
            // Typüberprüfung sollte eigentlich nicht notwendig sein, aber trotzdem hier nur für alle Fälle
            if(tab instanceof  CodeTab) {
                CodeTab codeTab = (CodeTab) tab;

                // Wenn die Datei schon geöffnet ist, diesen Tab öffnen und methode hier abbrechen
                if(codeTab.getFile() == file) {
                    tabPane.getSelectionModel().select(tab);
                    return;
                }
            }
        }

        // Wenn die Datei noch nicht geöffnet ist, wird ein neuer Tab erstellt
        tabPane.getTabs().add(new CodeTab(tabPane, file, syntax));
    }

    // Öffnet ein Dialog Fenster um eine neue Datei zu erstellen
    @FXML
    private void newfile() {
        FileChooser chooser = new FileChooser();
        chooser.setTitle("New file");
        chooser.getExtensionFilters().add(ExtensionFilters.MC_FUNCTION);
        chooser.setInitialDirectory(new File(Project.getDataDir()));
        File newFile = chooser.showSaveDialog(tabPane.getScene().getWindow());
        try {
            FileWriter writer = new FileWriter(newFile);
            writer.write("# New MC-Function File | Generated by MC-IDE");
            writer.close();
        } catch (IOException exception) {
            exception.printStackTrace();
        }

        tabPane.getTabs().add(new CodeTab(tabPane, newFile, syntax));
    }

}
